{"version":3,"sources":["cryptomonedas.png","components/Spinner.js","components/Error.js","hooks/useMoneda.js","hooks/useCriptomoneda.js","components/Formulario.js","components/Cotizacion.js","App.js","reportWebVitals.js","index.js"],"names":["Spinner","class","MensajeError","styled","p","Error","mensaje","Label","label","Select","select","Boton","input","Formulario","guardarMoneda","guardarCriptomoneda","useState","listacripto","guardarCriptomonedas","error","guardarError","stateInicial","opciones","state","actualizarState","htmlFor","onChange","e","target","value","map","opcion","codigo","nombre","useMoneda","moneda","SelectMonedas","CoinInfo","Name","FullName","Id","useCriptomoneda","criptomoneda","SelectCripto","useEffect","a","axios","get","resultado","data","Data","consultarAPI","onSubmit","preventDefault","type","ResultadoDiv","div","Info","Precio","Cotizacion","Object","keys","length","console","log","PRICE","HIGHDAY","LOWDAY","CHANGEPCT24HOUR","LASTUPDATE","Contenedor","Imagen","img","Heading","h1","App","guardarResultado","cargando","guardarCargando","url","setTimeout","DISPLAY","cotizarCriptomoneda","componente","src","imagen","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.74b9428a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/cryptomonedas.51f1d2ed.png\";","import React from \"react\";\nimport \"./Spinner.css\";\n\nexport const Spinner = () => {\n  return (\n    <div class=\"sk-folding-cube\">\n      <div class=\"sk-cube1 sk-cube\"></div>\n      <div class=\"sk-cube2 sk-cube\"></div>\n      <div class=\"sk-cube4 sk-cube\"></div>\n      <div class=\"sk-cube3 sk-cube\"></div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport styled from \"@emotion/styled\";\n\nconst MensajeError = styled.p`\n  background-color: #b7322c;\n  padding: 1rem;\n  color: #fff;\n  font-size: 30px;\n  text-transform: uppercase;\n  font-weight: bold;\n  text-align: center;\n  font-family: \"Bebas Neue\", cursive;\n`;\n\nexport const Error = ({ mensaje }) => {\n  return <MensajeError>{mensaje}</MensajeError>;\n};\n","import React, { Fragment, useState } from \"react\";\nimport styled from \"@emotion/styled\";\n\nconst Label = styled.label`\n  font-family: \"Bebas Neue\", cursive;\n  color: #fff;\n  text-transform: uppercase;\n  font-weight: bold;\n  font-size: 2.4rem;\n  margin-top: 2rem;\n  display: block;\n`;\n\nconst Select = styled.select`\n  width: 100%;\n  display: block;\n  padding: 1rem;\n  -webkit-appearance: none;\n  border-radius: 10px;\n  border: none;\n  font-size: 1.2rem;\n`;\n\nexport const useMoneda = (label, stateInicial, opciones) => {\n  // State de nuestro custom hook\n  const [state, actualizarState] = useState(stateInicial);\n\n  const Seleccionar = () => (\n    <Fragment>\n      <Label htmlFor=\"\">{label}</Label>\n      <Select onChange={(e) => actualizarState(e.target.value)} value={state}>\n        <option value=\"\">- Seleccione -</option>\n        {opciones.map((opcion) => (\n          <option key={opcion.codigo} value={opcion.codigo}>\n            {opcion.nombre}\n          </option>\n        ))}\n      </Select>\n    </Fragment>\n  );\n\n  //   Retorna el State, inteface y función que modifica el State\n  return [state, Seleccionar, actualizarState];\n};\n","import React, { Fragment, useState } from \"react\";\nimport styled from \"@emotion/styled\";\n\nconst Label = styled.label`\n  font-family: \"Bebas Neue\", cursive;\n  color: #fff;\n  text-transform: uppercase;\n  font-weight: bold;\n  font-size: 2.4rem;\n  margin-top: 2rem;\n  display: block;\n`;\n\nconst Select = styled.select`\n  width: 100%;\n  display: block;\n  padding: 1rem;\n  -webkit-appearance: none;\n  border-radius: 10px;\n  border: none;\n  font-size: 1.2rem;\n`;\n\nexport const useCriptomoneda = (label, stateInicial, opciones) => {\n  // State de nuestro custom hook\n  const [state, actualizarState] = useState(stateInicial);\n\n  const SelectCripto = () => (\n    <Fragment>\n      <Label htmlFor=\"\">{label}</Label>\n      <Select onChange={(e) => actualizarState(e.target.value)} value={state}>\n        <option value=\"\">- Seleccione -</option>\n        {opciones.map((opcion) => (\n          <option key={opcion.CoinInfo.Id} value={opcion.CoinInfo.Name}>\n            {opcion.CoinInfo.FullName}\n          </option>\n        ))}\n      </Select>\n    </Fragment>\n  );\n\n  //   Retorna el State, inteface y función que modifica el State\n  return [state, SelectCripto, actualizarState];\n};\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"@emotion/styled\";\nimport { Error } from \"./Error\";\nimport { useMoneda } from \"../hooks/useMoneda\";\nimport { useCriptomoneda } from \"../hooks/useCriptomoneda\";\nimport axios from \"axios\";\n\nconst Boton = styled.input`\n  margin-top: 20px;\n  font-weight: bold;\n  font-size: 20px;\n  padding: 10px;\n  background-color: #66a2fe;\n  border: none;\n  width: 100%;\n  border-radius: 10px;\n  color: #fff;\n  transition: background-color 0.3s ease;\n  &:hover {\n    background-color: #326ac0;\n    cursor: pointer;\n  }\n`;\n\nexport const Formulario = ({ guardarMoneda, guardarCriptomoneda }) => {\n  // State del listado de criptomonedas\n  const [listacripto, guardarCriptomonedas] = useState([]);\n\n  const [error, guardarError] = useState(false);\n\n  const MONEDAS = [\n    { codigo: \"USD\", nombre: \"Dolar de Estados Unidos\" },\n    { codigo: \"MXN\", nombre: \"Peso Mexicano\" },\n    { codigo: \"EUR\", nombre: \"Euro\" },\n    { codigo: \"GBP\", nombre: \"Libra Esterlina\" },\n  ];\n  // Utilizar useMoneda\n  const [moneda, SelectMonedas, actualizarState] = useMoneda(\n    \"Elige tu moneda\",\n    \"\",\n    MONEDAS\n  );\n\n  //   Utilizar useCirptomoneda\n  const [criptomoneda, SelectCripto] = useCriptomoneda(\n    \"Elige tu Criptomoneda\",\n    \"\",\n    listacripto\n  );\n\n  //   Ejecutar llamada a la API\n  useEffect(() => {\n    const consultarAPI = async () => {\n      const url =\n        \"https://min-api.cryptocompare.com/data/top/mktcapfull?limit=10&tsym=USD\";\n\n      const resultado = await axios.get(url);\n\n      guardarCriptomonedas(resultado.data.Data);\n    };\n    consultarAPI();\n  }, []);\n\n  //   Cuando el usuario hace submit\n  const cotizarMoneda = (e) => {\n    e.preventDefault();\n\n    // Validar si ambos campos estñan vacios\n    if (moneda === \"\" || criptomoneda === \"\") {\n      guardarError(true);\n      return;\n    }\n    //Pasar los datos al componente principal\n    guardarError(false);\n    guardarMoneda(moneda);\n    guardarCriptomoneda(criptomoneda);\n  };\n\n  return (\n    <form onSubmit={cotizarMoneda}>\n      {error ? <Error mensaje=\"Todos los campos son obligatorios\" /> : null}\n      <SelectMonedas />\n      <SelectCripto />\n      <Boton type=\"submit\" value=\"Calcular\"></Boton>\n    </form>\n  );\n};\n","import React from \"react\";\nimport styled from \"@emotion/styled\";\n\nconst ResultadoDiv = styled.div`\n  color: #fff;\n  font-family: Arial, Helvetica, sans-serif;\n`;\n\nconst Info = styled.p`\n  font-size: 18px;\n  span {\n    font-weight: bold;\n  }\n`;\nconst Precio = styled.p`\n  font-size: 30px;\n  span {\n    font-weight: bold;\n  }\n`;\n\nconst Cotizacion = ({ resultado }) => {\n  if (Object.keys(resultado).length === 0) return null;\n\n  console.log(resultado);\n\n  return (\n    <ResultadoDiv>\n      <Precio>\n        El precio es: <span>{resultado.PRICE}</span>{\" \"}\n      </Precio>\n      <Info>\n        Precio más alto del día: <span>{resultado.HIGHDAY}</span>{\" \"}\n      </Info>\n      <Info>\n        Precio más bajo del día: <span>{resultado.LOWDAY}</span>{\" \"}\n      </Info>\n      <Info>\n        Variación últimas 24 horas: <span>{resultado.CHANGEPCT24HOUR}</span>{\" \"}\n      </Info>\n      <Info>\n        Última Actualización: <span>{resultado.LASTUPDATE}</span>{\" \"}\n      </Info>\n    </ResultadoDiv>\n  );\n};\n\nexport default Cotizacion;\n","import React, { useState, useEffect } from \"react\";\nimport imagen from \"./cryptomonedas.png\";\nimport axios from \"axios\";\nimport { Spinner } from \"./components/Spinner\";\nimport styled from \"@emotion/styled\";\nimport { Formulario } from \"./components/Formulario\";\nimport Cotizacion from \"./components/Cotizacion\";\n\nconst Contenedor = styled.div`\n  max-width: 900px;\n  margin: 0 auto;\n  @media (min-width: 992px) {\n    display: grid;\n    grid-template-columns: repeat(2, 1fr);\n    column-gap: 2rem;\n  }\n`;\n\nconst Imagen = styled.img`\n  max-width: 100%;\n  margin-top: 5rem;\n`;\nconst Heading = styled.h1`\n  font-family: \"Bebas Neue\", cursive;\n  color: #fff;\n  text-align: left;\n  font-weight: 700;\n  font-size: 50px;\n  margin-bottom: 50px;\n  margin-top: 80px;\n  &::after {\n    content: \"\";\n    width: 100px;\n    height: 6px;\n    background-color: #66a2fe;\n    display: block;\n  }\n`;\n\nfunction App() {\n  const [moneda, guardarMoneda] = useState(\"\");\n\n  const [criptomoneda, guardarCriptomoneda] = useState(\"\");\n\n  const [resultado, guardarResultado] = useState({});\n\n  const [cargando, guardarCargando] = useState(false);\n\n  useEffect(() => {\n    const cotizarCriptomoneda = async () => {\n      // evitamos la ejecución la primera vez\n      if (moneda === \"\") return;\n\n      // consultar la api para obtener la cotizacion\n      const url = `https://min-api.cryptocompare.com/data/pricemultifull?fsyms=${criptomoneda}&tsyms=${moneda}`;\n\n      const resultado = await axios.get(url);\n\n      // mostrar el spinner\n      guardarCargando(true);\n\n      // ocultar el spinner y mostrar el resultado\n      setTimeout(() => {\n        // cambiar el estado de cargando\n        guardarCargando(false);\n\n        // guardar cotizacion\n        guardarResultado(resultado.data.DISPLAY[criptomoneda][moneda]);\n      }, 3000);\n    };\n    cotizarCriptomoneda();\n  }, [moneda, criptomoneda]);\n\n  //  Mostrar spinner o resultado\n  const componente = cargando ? (\n    <Spinner />\n  ) : (\n    <Cotizacion resultado={resultado} />\n  );\n\n  return (\n    <Contenedor>\n      <div>\n        <Imagen src={imagen} alt=\"imagen cripto\" />\n      </div>\n      <div>\n        <Heading>Cotiza Criptomonedas al Instante</Heading>\n\n        <Formulario\n          guardarMoneda={guardarMoneda}\n          guardarCriptomoneda={guardarCriptomoneda}\n        />\n\n        {componente}\n      </div>\n    </Contenedor>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}